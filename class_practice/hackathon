#source code from https://github.com/KeithGalli/Connect4-Python
import numpy as np
import pygame
import sys
import math

#piece/board colors
ORANGE = (221,114,48)
BLACK = (0,0,0)
RED = (142,30,30)
PURPLE = (135,63,117)
WHITE = (255,255,255)

#board setup
ROW_COUNT = 6
COLUMN_COUNT = 7

#change the dropping speed (lower = slower)
DROP_SPEED = 160

#create board using assigned row/column values
def create_board():
    board = np.zeros((ROW_COUNT,COLUMN_COUNT))
    return board

#drop piece in board
def drop_piece(board, row, col, piece):
        board[row][col] = piece
        return (ROW_COUNT - 1 - row) * SQUARESIZE + SQUARESIZE

#animate piece drop
#this part sucks, heinous crimes were committed
#we edited this part of the code about 67 times
#words cannot express how difficult this was
#i asked perplexity to fix this for us so many times
def animate_drop(screen, board, col, piece, color):
        row = get_next_open_row(board, col)
        start_y = SQUARESIZE
        target_y = (ROW_COUNT - row) * SQUARESIZE + SQUARESIZE // 2
        current_y = start_y

        while current_y < target_y:
            # Clear the screen
            screen.fill(BLACK)

            # Redraw the board grid
            for c in range(COLUMN_COUNT):
                for r in range(ROW_COUNT):
                    pygame.draw.rect(screen, ORANGE, (c*SQUARESIZE, (r+1)*SQUARESIZE, SQUARESIZE, SQUARESIZE))
                    pygame.draw.circle(screen, BLACK, (c*SQUARESIZE+SQUARESIZE//2, (r+1)*SQUARESIZE+SQUARESIZE//2), RADIUS)

            # Draw existing pieces
            for c in range(COLUMN_COUNT):
                for r in range(ROW_COUNT):
                    if board[r][c] != 0:
                        piece_color = RED if board[r][c] == 1 else PURPLE
                        piece_y = height - (r * SQUARESIZE + SQUARESIZE // 2)
                        pygame.draw.circle(screen, piece_color, (c*SQUARESIZE+SQUARESIZE//2, piece_y), RADIUS)

            # Draw the falling piece
            pygame.draw.circle(screen, color, (col*SQUARESIZE+SQUARESIZE//2, current_y), RADIUS)

            pygame.display.update()
            pygame.time.wait(1000 // DROP_SPEED)
            current_y += 5

        # Update the board with the new piece
        board[row][col] = piece

        # Draw the final board state
        screen.fill(BLACK)
        draw_board(board)
        pygame.display.update()

#check if move is valid placement
def is_valid_location(board, col):
    return board[ROW_COUNT-1][col] == 0

#finds lowest empty row to drop piece
def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r
            
#displays current state of the board
def print_board(board):
    print(np.flip(board, 0))

#checks if last move has resulted in a win
def winning_move(board, piece):
    # Checks horizontal locations
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True

    # Checks vertical locations
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # Checks positively sloped diaganols
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True

    # Check negatively sloped diagonals
    for c in range(COLUMN_COUNT-3):
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

#renders board onto screen
def draw_board(board):
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            pygame.draw.rect(screen, ORANGE, (c*SQUARESIZE, r*SQUARESIZE+SQUARESIZE, SQUARESIZE, SQUARESIZE))
            pygame.draw.circle(screen, BLACK, (int(c*SQUARESIZE+SQUARESIZE/2), int(r*SQUARESIZE+SQUARESIZE+SQUARESIZE/2)), RADIUS)

    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):		
            if board[r][c] == 1:
                pygame.draw.circle(screen, RED, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
            elif board[r][c] == 2: 
                pygame.draw.circle(screen, PURPLE, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
    pygame.display.update()

#game over display
def display_game_over(screen, winner):
            game_over_font = pygame.font.SysFont("monospace", 60)
            winner_font = pygame.font.SysFont("monospace", 50)

            game_over_text = game_over_font.render("GAME OVER", 1, WHITE)
            winner_text = winner_font.render(f"Player {winner} Wins!", 1, RED if winner == 1 else PURPLE)

            # Calculate the total height of both text elements
            total_text_height = game_over_text.get_height() + winner_text.get_height() + 10  # 10 pixels gap

            # Position the text in the top part of the screen, above the game board
            y_position = SQUARESIZE // 2 - total_text_height // 2

            screen.blit(game_over_text, (width // 2 - game_over_text.get_width() // 2, y_position))
            screen.blit(winner_text, (width // 2 - winner_text.get_width() // 2, y_position + game_over_text.get_height() + 10))
            pygame.display.update()

#initializes game start
    #creates game board
board = create_board()
    #prints blank board
print_board(board)
    #keeps track of if game has ended
game_over = False
    #keeps track of whose turn it is
turn = 0

#initializes pygame modules
pygame.init()

#defines size of each cell/square in game grid
SQUARESIZE = 100

#calcualtes size of game window
width = COLUMN_COUNT * SQUARESIZE
height = (ROW_COUNT+1) * SQUARESIZE

#creates tuple of width & height
size = (width, height)

#defines radius of circular pieces
RADIUS = int(SQUARESIZE/2 - 5)

screen = pygame.display.set_mode(size)
draw_board(board)
pygame.display.update()

#prepares font to read out "x player wins/loses"
myfont = pygame.font.SysFont("monospace", 75)

#main game loop
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        #tracks mouse movement
        if event.type == pygame.MOUSEMOTION:
            pygame.draw.rect(screen, BLACK, (0,0, width, SQUARESIZE))
            posx = event.pos[0]
            color = RED if turn == 0 else PURPLE
            pygame.draw.circle(screen, color, (posx, int(SQUARESIZE/2)), RADIUS)
        pygame.display.update()

        #detects mouse click
        if event.type == pygame.MOUSEBUTTONDOWN:
            pygame.draw.rect(screen, BLACK, (0,0, width, SQUARESIZE))
            posx = event.pos[0]
            col = int(math.floor(posx/SQUARESIZE))

            #game logic
            if is_valid_location(board, col):
                row = get_next_open_row(board, col)
                player = turn + 1
                color = RED if turn == 0 else PURPLE
                animate_drop(screen, board, col, player, color)

                if winning_move(board, player):
                    draw_board(board)
                    display_game_over(screen, player)
                    game_over = True

                print_board(board)

                turn += 1
                turn = turn % 2

            # After the game is over, keep the window open
            if game_over:
                while True:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            sys.exit()
                    pygame.time.wait(5000)
